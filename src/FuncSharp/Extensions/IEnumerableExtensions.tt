<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../CodeGen/Helpers.ttinclude" #>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace FuncSharp
{
    public static class IEnumerableExtensions
    {
        /// <summary>
        /// Returns values of the nonempty options.
        /// </summary>
        public static IEnumerable<T> Flatten<T>(this IEnumerable<IOption<T>> source)
        {
            return source.SelectMany(o => o.ToEnumerable());
        }

        /// <summary>
        /// Returns the specified collection as an option in case it is nonempty. Otherwise returns empty option.
        /// </summary>
        public static IOption<T> ToNonEmptyOption<T>(this T source)
            where T : IEnumerable
        {
            if (source == null || !source.Any())
            {
                return Option.Empty<T>();
            }
            return source.ToOption();
        }

        /// <summary>
        /// Returns first value or an empty option. 
        /// </summary>
        public static IOption<T> FirstOption<T>(this IEnumerable<T> source, Func<T, bool> predicate = null)
        {
            var data = source.Where(predicate ?? (t => true)).Take(1).ToList();
            if (data.Count == 0)
            {
                return Option.Empty<T>();
            }
            return Option.Valued(data.First());
        }

        /// <summary>
        /// Returns last value or an empty option. 
        /// </summary>
        public static IOption<T> LastOption<T>(this IEnumerable<T> source, Func<T, bool> predicate = null)
        {
            return source.Reverse().FirstOption(predicate);
        }

        /// <summary>
        /// Returns the only value if the source contains just one value, otherwise an empty option.
        /// </summary>
        public static IOption<T> SingleOption<T>(this IEnumerable<T> source, Func<T, bool> predicate = null)
        {
            var data = source.Where(predicate ?? (t => true)).Take(2).ToList();
            if (data.Count == 2)
            {
                return Option.Empty<T>();
            }
            return data.FirstOption();
        }
        <#  for (var i = 1; i <= MaxStructureArity(); i++) { #>

        /// <summary>
        /// Coverts the source to a new <#= i #>-dimensional data cube.
        /// </summary>
        public static <#= DataCubeType(i) #> ToDataCube<T, <#= Types(i, name: "P") #>, TValue>(
            this IEnumerable<T> source,
<#= Lines(i, x => Indent(12) + "Func<T, P" + x + "> p" + x, separator: ",") #>,
            Func<T, TValue> value)
        {
            return DataCube.Create(source, <#= List(i, x => "p" + x) #>, value);
        }
<#  } #>
    }
}